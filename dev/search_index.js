var documenterSearchIndex = {"docs":
[{"location":"#ColonyImages","page":"Home","title":"ColonyImages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ColonyImages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"    Modules = [ColonyImages]","category":"page"},{"location":"#ColonyImages.approx_radi_colo-Tuple{Any}","page":"Home","title":"ColonyImages.approx_radi_colo","text":"Calculates the approximate diameter of a colony by summing up all the pixel values and taking the square root of the sum.\n\n\n\n\n\n","category":"method"},{"location":"#ColonyImages.b_w-Tuple{Any}","page":"Home","title":"ColonyImages.b_w","text":"Converts an grayscale colony image into a binary image/BitArray. Checks if more than half of image is black and inverts it in that case As the colony is always much smaller that the background, this ensures that in the output image the pixels inside the colony are always set to 1 and the background pixels to 0, no matter the invertion status of the input image . \n\n\n\n\n\n","category":"method"},{"location":"#ColonyImages.build_circle-Tuple{Any, Any, Any}","page":"Home","title":"ColonyImages.build_circle","text":"12 Creates a binary image with same size as input image. The binary image is a circle with a given center. The circle is \n\n\n\n\n\n","category":"method"},{"location":"#ColonyImages.centroid-Tuple{Any}","page":"Home","title":"ColonyImages.centroid","text":"Imput is a 2D Int or Float array (an image), output are the discrete coordinates of the centroid of the image. The intensity/values of the pixels/array entrys are interpreted as physical weight in the centroid calculation. The centroid is calculated as the weighted mean of the pixel coordinates. \n\n\n\n\n\n","category":"method"},{"location":"#ColonyImages.conv-Tuple{Any, Any}","page":"Home","title":"ColonyImages.conv","text":"Creates a Convolution of an Image with a given kernel. The input image is a 2D Int or Float array.  The kernel is a smaller 2D Int or Float array. The output is a 2D FLoat64 array with the same size the input image. \n\n\n\n\n\n","category":"method"},{"location":"#ColonyImages.create_kernel-Tuple{Any}","page":"Home","title":"ColonyImages.create_kernel","text":"Creates a binary image kernel with a given radius. The kernel can be either a circle or a square. \n\n\n\n\n\n","category":"method"},{"location":"#ColonyImages.expand_colony_fractal_radom_cov!-Tuple{Any, Any}","page":"Home","title":"ColonyImages.expand_colony_fractal_radom_cov!","text":"Expands colony randomly but it is more likely to expand to points that only have 2 neigboors or less\n\n\n\n\n\n","category":"method"},{"location":"#ColonyImages.fill_holes-Tuple{Any, Any}","page":"Home","title":"ColonyImages.fill_holes","text":"Filles holes in \n\n\n\n\n\n","category":"method"},{"location":"#ColonyImages.find_peaks-Tuple{Any}","page":"Home","title":"ColonyImages.find_peaks","text":"Finds the local maxima inside a 1D signal, in areas where the  signal exceed an its mean value by a given factor\n\n\n\n\n\n","category":"method"},{"location":"#ColonyImages.generate_dir_vec-Tuple{Any, Any}","page":"Home","title":"ColonyImages.generate_dir_vec","text":"Generates vectors of x and y coordinates that span vectors ranging from 0 to 2Ï€     Execute the following code to understand how this function works.\n\n    using CairoMakie\n    number_vecs = 20\n    y,x = generate_dir_vec(20,0.1)\n    yy = zeros(number_vecs)\n    arrows(yy,yy, y, x)\n\n\n\n\n\n","category":"method"},{"location":"#ColonyImages.lattice_points-Tuple{Int64}","page":"Home","title":"ColonyImages.lattice_points","text":"Calcultes ascending integer pairs which fit into a circle with radius r. The return type is a Vector{Vector{Vector{Int}}} where as the first index is corresponds to r and the second for a individual pair\n\n\n\n\n\n","category":"method"},{"location":"#ColonyImages.occupied_points-Tuple{Any}","page":"Home","title":"ColonyImages.occupied_points","text":"Calculates the number of pixels == 1 in a binary image. \n\n\n\n\n\n","category":"method"},{"location":"#ColonyImages.rad2deg_discrete-Tuple{Any}","page":"Home","title":"ColonyImages.rad2deg_discrete","text":"Helper functions for angular metric, takes an angle in radiants as input and a number of circular sectors into which a unit circle is divided. The output is the number of circular sector to which the angle corresponds. E.g angle = 0.0 ,steps = 360 ;output = 1 which is first circular sector on the unit circle, EG.  angle = (2pi -0.01), steps = 360, output = 360, last circular sector ranging from 2pi -0.01), steps = 360, output = 360, last circular sector ranging from [2pi/steps *(steps-1) - 2pi)\n\n\n\n\n\n","category":"method"}]
}
